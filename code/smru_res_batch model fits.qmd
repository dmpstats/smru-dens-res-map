---
title: "smru RES batch fit"
format: html
editor: visual
---

## Overview

```{r}
#| include: false

library(tidyverse)
library(here)
library(mgcv)
library(furrr)
library(progressr)

source("tools.R")


```

## Read and prep data in bulk

RES spreadsheets to start.

```{r}

infileList <- list.files(here("NE Atlantic Data/RES spreadsheets/"), recursive = F, full.names = T) 
infileList <- infileList[str_detect(infileList, "\\.csv")]

resDataList <- map(infileList, read_csv)

resData <- bind_rows(resDataList) 

```


```{r}

infileList <- list.files(here("NE Atlantic Data"), recursive = F, full.names = T) 
infileList <- infileList[str_detect(infileList, "\\.csv")]

dataList <- map(infileList, read_csv)

rawSpecies <- bind_rows(dataList) %>% 
  rename(UpperCI = CI_95_high,
         LowerCI = CI_95_low) 

```

```{r}
# Adding survey uncertainty -------------------------------------------------------------------
#' Here devise resampling for the different sorts of uncertainty that are present in the survey data
#' Note, there are single measures and upper/lower 95% CIS
#' 

table(rawSpecies$Uncertainty_measure, useNA = "always")

# check that where there is not a single measure, we do have a CI
test <- rawSpecies %>% filter(is.na(Uncertainty_measure)) 

test %>% filter(!is.na(LowerCI))

test <- rawSpecies %>% 
  mutate(Uncertainty_measure = ifelse(is.na(Uncertainty_measure) & !is.na(LowerCI), "Confint", Uncertainty_measure)) %>%
  filter(!(is.na(Uncertainty_measure) & is.na(UpperCI))) 

table(test$Uncertainty_measure, useNA = "always")
```

Basic approach here is to convert *everything* to a standard error. This is done either directly for CVs (noting some are %-age), SEs for abundance, SEs as given, or inferred from confidence intervals assuming that these are log-Normally distributed.

```{r}
# note some have CIs and alterative measure. Will use CIs when available
# %-age CV looks to just be CV * 100
# convert to CVs, extract as CIs so single sampling method required
# everything in the data with a CV provided a CI as well

speciesData <- rawSpecies %>%
  mutate(Uncertainty_measure = ifelse(is.na(Uncertainty_measure) & !is.na(LowerCI), "Confint", Uncertainty_measure)) %>% # input Confint where we have them, drop where we can't ID uncertainty
  filter(!(is.na(Uncertainty_measure) & is.na(UpperCI))) %>% 
  filter(!(is.na(Uncertainty) & is.na(UpperCI))) %>% 
  mutate(Uncertainty = ifelse(str_detect(Uncertainty_measure, "CV") & Uncertainty > 4, Uncertainty/100, Uncertainty), # looks like various % errors 
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "% CV abundance"), Uncertainty/100, Uncertainty), 
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "% CV for abundance"), "CV", Uncertainty_measure), 
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "CV"), Uncertainty*Density, Uncertainty),
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "CV"), "SE", Uncertainty_measure),
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "SE density"), "SE", Uncertainty_measure),
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "Variance of density"), sqrt(Uncertainty), Uncertainty),
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "Variance of density"), "SE", Uncertainty_measure),
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "Variance of abundance"), NA, Uncertainty), # all these have CIs
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "Variance of abundance"), "Confint", Uncertainty_measure),
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "SE abundance"), NA, Uncertainty), # all these have CIs
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "SE abundance"), "Confint", Uncertainty_measure),
         workingSE = Uncertainty
  )

```


Correct for situations where the density has been converted to a different scale, but SE has not e.g. 100km2 to 1km2.


```{r}

speciesData %>% 
  mutate(CV = workingSE/Density) %>% 
  filter(Uncertainty_measure == "SE" & CV > 2) %>% 
  group_by(Internal_reference) %>% 
  summarise(N = n())

```


```{r}

speciesData %>% 
  mutate(CV = workingSE/Density) %>% 
  filter(str_detect(Internal_reference, "015_Harwood|055_Stone|091_Sagnol")) %>% 
  group_by(Internal_reference) %>% 
  summarise(N = n())

```

So we need only correct for these data sources in totality - there are only SE.



```{r}

speciesData <- speciesData %>% 
  mutate(workingSE = if_else(str_detect(Internal_reference, "015_Harwood|055_Stone|091_Sagnol"), workingSE/100, workingSE))

```


Now require SE where we have only CIs. Many don't seem consistent with the lognormal (appear very approximate - suspect have been hacked, particularly with zero lower bounds)



```{r}

temp <- speciesData %>% 
  select(Uncertainty_measure, Uncertainty, Density, LowerCI, UpperCI) %>% 
  filter(Uncertainty_measure == "Confint") %>% 
  mutate(ratio = (UpperCI - LowerCI)/Density,
         SE = SEfromCI(Density, LowerCI, UpperCI),
         CV = SE/Density) 


```

The rationale here therefore is to use the lognormal to generate, except for where it fails (Inf returned). This is where we have 0 lower CI, which themselves appear to be hacked. In these cases, assume SE is the CI range/2*1.96 - which appears reasonable for these few cases. Suspect these have been generated from a normal approximation, with an arbitrary bounding at zero.





```{r}

speciesData <- speciesData %>% 
  mutate(workingSE = if_else(Uncertainty_measure == "Confint", SEfromCI(Density, LowerCI, UpperCI), workingSE),
         workingSE = if_else(is.infinite(workingSE), (UpperCI - LowerCI)/(2*1.96), workingSE), 
         CV = workingSE/Density) 


```


Will be sampling from lognormal, check these aren't wildly contradictory where we have CIs to compare to.


```{r}
# obtain CIs from lognormal using mean, SE

speciesData <- speciesData %>%
  mutate(workingLowerCI = qlnorm(0.025, logMu(Density, workingSE), logSigma(Density, workingSE)),
         workingUpperCI = qlnorm(0.975, logMu(Density, workingSE), logSigma(Density, workingSE)),
         lowerError = LowerCI - workingLowerCI, 
         upperError = UpperCI - workingUpperCI,
         blockID = Survey
  ) 

```




```{r}

summary(speciesData$lowerError)
summary(speciesData$upperError)

```


```{r}

speciesData %>% 
  mutate(errorRatio = abs(upperError)/UpperCI) %>% 
  filter(errorRatio > 2)

```

```{r}

speciesData %>% 
  filter(str_detect(Internal_reference, "Fulling"))

```

```{r}

speciesData <- speciesData %>% 
  mutate(Density = if_else(str_detect(Internal_reference, "Fulling"), Density/1000, Density), 
         workingSE = if_else(str_detect(Internal_reference, "Fulling"), workingSE/1000, workingSE))

```


## Modelling batch

```{r}

speciesData %>% 
  group_by(Commonname, Location) %>% 
  summarise(dataSupport = n()) %>% 
  mutate(wholeData = T,
         northData = str_detect(Location, "North"),
         atlanticData = str_detect(Location, "Atlantic"),
         northEast = str_detect(Location, "Northeast")) %>% 
  print(n = 100)
         


```


### blue whale
  

```{r}
#| eval: false

speciesName <- "Blue"  
locationName <- "Whole"
inBootN <- 250


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "North"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Atlantic"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Northeast"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

```

### Bowhead whale


```{r}
#| eval: false

speciesName <- "Bow"  
locationName <- "Whole"
inBootN <- 250


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "North"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Atlantic"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Northeast"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")


```



### Brydes whale


```{r}
#| eval: false

speciesName <- "Bryde"  
locationName <- "Whole"
inBootN <- 250


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")


locationName <- "North"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Atlantic"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")



```


### Fin whale

```{r}
#| eval: false

speciesName <- "Fin"  
locationName <- "Whole"
inBootN <- 250


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "North"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Atlantic"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")


locationName <- "Northeast"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

```


### Humpback whale


```{r}
#| eval: false

speciesName <- "Hump"  
locationName <- "Whole"
inBootN <- 250


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "North"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")


locationName <- "Atlantic"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Northeast"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

```

### Minke whale


```{r}
#| eval: false

speciesName <- "minke"  
locationName <- "Whole"
inBootN <- 250


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "North"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Atlantic"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Northeast"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

```

### North atlantic right whale


```{r}

speciesName <- "right"  
locationName <- "North"
inBootN <- 250


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

```


### Sei whale


```{r}
#| eval: false

speciesName <- "Sei"  
locationName <- "Whole"
inBootN <- 250


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "North"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")


locationName <- "Atlantic"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Northeast"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

```


### Sperm whale



```{r}
#| eval: false

speciesName <- "Sperm"  
locationName <- "Whole"
inBootN <- 250
inSeed <- 56456


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam", inSeed = inSeed)

locationName <- "North"

workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Atlantic"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

locationName <- "Northeast"


workingData <- speciesData %>% 
  filter(str_detect(Commonname, speciesName), str_detect(Location, locationName)) 

workingRES <- resData %>%
  filter(str_detect(Commonname, speciesName)) 

fitFun(speciesName, locationName, nBoot = inBootN, modelForm = "gam")

```
