---
title: "smru RES batch fit"
format: html
editor: visual
---

## Overview

```{r}
#| include: false

library(tidyverse)
library(here)


```


## Read and prep data in bulk


```{r}

infileList <- list.files(here("NE Atlantic Data"), recursive = F, full.names = T) 
infileList <- infileList[str_detect(infileList, "\\.csv")]

dataList <- map(infileList, read_csv)

rawSpecies <- bind_rows(dataList) %>% 
  rename(UpperCI = CI_95_high,
         LowerCI = CI_95_low) 

```


```{r}
# Adding survey uncertainty -------------------------------------------------------------------
#' Here devise resampling for the different sorts of uncertainty that are present in the survey data
#' Note, there are single measures and upper/lower 95% CIS
#' 

table(rawSpecies$Uncertainty_measure, useNA = "always")

# check that where there is not a single measure, we do have a CI
test <- rawSpecies %>% filter(is.na(Uncertainty_measure)) 

test %>% filter(!is.na(LowerCI))

speciesData <- rawSpecies %>% 
  mutate(Uncertainty_measure = ifelse(is.na(Uncertainty_measure) & !is.na(LowerCI), "Confint", Uncertainty_measure)) %>%
  filter(!(is.na(Uncertainty_measure) & is.na(UpperCI))) 

table(speciesData$Uncertainty_measure, useNA = "always")
```

Basic approach here is to convert _everything_ to a standard error. This is done either directly for CVs (noting some are %-age), SEs for abundance, SEs as given, or inferred from confidence intervals assuming that these are log-Normally distributed. 


```{r}
# note some have CIs and alterative measure. Will use CIs when available
# %-age CV looks to just be CV * 100
# convert to CVs, extract as CIs so single sampling method required
# everything in the data with a CV provided a CI as well

speciesData <- speciesData %>%
  mutate(Uncertainty = ifelse(str_detect(Uncertainty_measure, "CV") & Uncertainty > 4, Uncertainty/100, Uncertainty), # looks like various % errors 
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "% CV abundance"), Uncertainty/100, Uncertainty), 
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "% CV for abundance"), "CV", Uncertainty_measure), 
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "CV"), Uncertainty*Density, Uncertainty),
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "CV"), "SE", Uncertainty_measure),
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "SE density"), "SE", Uncertainty_measure),
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "Variance of density"), sqrt(Uncertainty), Uncertainty),
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "Variance of density"), "SE", Uncertainty_measure),
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "Variance of abundance"), NA, Uncertainty), # all these have CIs
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "Variance of abundance"), "Confint", Uncertainty_measure),
         Uncertainty = ifelse(str_detect(Uncertainty_measure, "SE abundance"), NA, Uncertainty), # all these have CIs
         Uncertainty_measure = ifelse(str_detect(Uncertainty_measure, "SE abundance"), "Confint", Uncertainty_measure),
         workingSE = Uncertainty,
         LowerCI = ifelse(LowerCI == 0, 0.0001, LowerCI), #arbitrary 0
         workingSE = ifelse(Uncertainty_measure == "Confint", SEfromCI(Density, LowerCI, UpperCI), workingSE)
  ) 

# obtain CIs from lognormal using mean, SE

speciesData <- speciesData %>%
  mutate(workingLowerCI = qlnorm(0.025, logMu(Density, workingSE), logSigma(Density, workingSE)),
         workingUpperCI = qlnorm(0.975, logMu(Density, workingSE), logSigma(Density, workingSE)),
         lowerError = LowerCI - workingLowerCI, 
         upperError = UpperCI - workingUpperCI,
         blockID = Survey
  ) 


write_csv(speciesData, here("data/smru_RES_cleaned density data.csv"))

```


## Modelling batch


```{r}

speciesData %>% 
  group_by(Commonname, Location) %>% 
  summarise(dataSupport = n()) %>% 
  mutate(wholeData = T,
         northData = str_detect(Location, "North"),
         atlanticData = str_detect(Location, "Atlantic"),
         northEast = str_detect(Location, "Northeast")) %>% 
  print(n = 100)
         


```



### blue whale

```{r}

speciesName <- "sperm"  
locationName <- "north"
nBoot <- 500


dataList <- split(speciesData, speciesData$blockID)

set.seed(345)

sampleList <- lapply(dataList, function(q){sampleLN(q$Density[1], q$workingSE[1], nBoot)})

sampleDF <- plyr::ldply(sampleList) %>%
  rename(Survey = .id)

speciesSamples <- speciesData %>% left_join(sampleDF)


speciesSamples <- speciesSamples %>% 
  select(-Density) %>%
  pivot_longer(names_to = "sampleID", values_to = "Density", V1:last_col()) 


speciesList <- split(speciesSamples, speciesSamples$sampleID)


# fittedList <- lapply(speciesList, gamFit, inRES = data.frame(RES = seq(0, 1, by = 0.01))) 

plan(multicore, workers = 10)

testFN <- function(inList){
  
  p <- progressor(steps = length(inList))
  
  future_map(inList, \(x) {p(); gamFitTweedie(x, inP = 1.2, inRES = data.frame(RES = seq(0, 1, by = 0.01)))})
  
}


with_progress({
  fittedList <- testFN(speciesList)
})


fittedDF <- fittedList %>%
  bind_rows()

fittedMatrix <- matrix(fittedDF$Pred, ncol = nBoot)

test <- t(apply(fittedMatrix, 1, function(q){quantile(q, probs = c(0.025, 0.5, 0.975))}))

testSE <- apply(fittedMatrix, 1, sd)

resFits <- as.data.frame(test) %>%
  mutate(RES = seq(0, 1, by = 0.01), SE = testSE) %>%
  rename(lower = `2.5%`, med = `50%`, upper = `97.5%`) %>%
  mutate(med = ifelse(med < 0, min(abs(med)), med),
         CV = SE/med) %>%
  #CV = ifelse(CV > 2, 2, CV)) %>%
  arrange(RES)

plottingDF <- resFits

bootPlot <- ggplot(plottingDF) +
  ggthemes::theme_fivethirtyeight() +
  #geom_point(data = ribbonsealData, aes(RES, Density), size = 2, alpha = 0.2) +
  geom_line(aes(RES, med), size = 2, alpha = 0.7, col = "purple") +
  geom_ribbon(aes(x = RES, ymin = lower, ymax = upper), fill = "purple", alpha = 0.2) +
  ggtitle("Density as function of RES", paste0(speciesName, " whale: bootstrapped monotone spline fits"))

bootPlot

ggsave(paste0("docs/images/", speciesName, "_", locationName, "_bootplot_", nBoot, ".png"), units = "cm", width = 30, height = 20)
saveRDS(plottingDF, paste0("data/plotting components/", speciesName, "_", locationName, "_plotElements",".rds"))


# Create RES grid predictions -----------------------------------------------------------------

resFits <- resFits %>% select(med, RES, CV) %>%
  rename(PredDensity = med) %>%
  mutate(RES = round(RES, 2))

predictionOutput <- resGrid %>% left_join(resFits, by = "RES")

predictionOutput <- predictionOutput %>%
  mutate(PredDensity = ifelse(RES == 0, 0, PredDensity),
         CV = ifelse(RES == 0, NA, CV))

summary(predictionOutput)



write.csv(predictionOutput, file = paste0("data/predictions/", speciesName, "_", locationName, "_predictions.csv"), row.names = F)


```


### Bowhead whle


### Brydes whale 


### Fin whale 


### Humpback whale 


### Minke whale 


### North atlantic right whale 


### Sei whale 


### Sperm whale






